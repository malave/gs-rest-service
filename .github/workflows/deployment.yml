# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Build Image and Deploy

on:
  release:
    types: [ published ]

jobs:
  build-docker:
    name: "Build/Push Docker Image"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            malave/gs-rest-service:latest
            malave/gs-rest-service:${{ steps.tag.outputs.tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
  deployment:
    name: "Helm install"
    runs-on: 'ubuntu-latest'
    needs: [ build-docker ]
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v1'
      - name: Get tag
        id: tag
        uses: dawidd6/action-get-tag@v1
      - name: 'Deploy'
        uses: 'deliverybot/helm@master'
        with:
          namespace: mdas
          release: mdas
          token: '${{ github.token }}'
          version: '${{ steps.tag.outputs.tag }}'
          chart: './servicechart'
          helm: helm3
          value-files: "./servicechart/values.yaml"
          values: |
            image:
              tag: "${{ steps.tag.outputs.tag }}"
            network:
              host: ${{ secrets.KUBE_HOST }}
        env:
          KUBECONFIG_FILE: '${{ secrets.KUBECONFIG }}'
